# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProgramInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, description: str=None, organization_id: int=None, duration: int=None):  # noqa: E501
        """ProgramInput - a model defined in Swagger

        :param name: The name of this ProgramInput.  # noqa: E501
        :type name: str
        :param description: The description of this ProgramInput.  # noqa: E501
        :type description: str
        :param organization_id: The organization_id of this ProgramInput.  # noqa: E501
        :type organization_id: int
        :param duration: The duration of this ProgramInput.  # noqa: E501
        :type duration: int
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'organization_id': int,
            'duration': int
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'organization_id': 'organization_id',
            'duration': 'duration'
        }
        self._name = name
        self._description = description
        self._organization_id = organization_id
        self._duration = duration

    @classmethod
    def from_dict(cls, dikt) -> 'ProgramInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProgramInput of this ProgramInput.  # noqa: E501
        :rtype: ProgramInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ProgramInput.


        :return: The name of this ProgramInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProgramInput.


        :param name: The name of this ProgramInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this ProgramInput.


        :return: The description of this ProgramInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ProgramInput.


        :param description: The description of this ProgramInput.
        :type description: str
        """

        self._description = description

    @property
    def organization_id(self) -> int:
        """Gets the organization_id of this ProgramInput.


        :return: The organization_id of this ProgramInput.
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id: int):
        """Sets the organization_id of this ProgramInput.


        :param organization_id: The organization_id of this ProgramInput.
        :type organization_id: int
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def duration(self) -> int:
        """Gets the duration of this ProgramInput.


        :return: The duration of this ProgramInput.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration: int):
        """Sets the duration of this ProgramInput.


        :param duration: The duration of this ProgramInput.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration
